
.temp.file.elf:     file format elf32-littleriscv

SYMBOL TABLE:
00000000 l    d  .init	00000000 .init
00000054 l    d  .text	00000000 .text
02000000 l    d  .data	00000000 .data
02000000 l    d  .bss	00000000 .bss
02000000 l    d  .stack	00000000 .stack
00000000 l    d  .riscv.attributes	00000000 .riscv.attributes
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    df *ABS*	00000000 tls.c
00000000 l    df *ABS*	00000000 
000001ad l       .debug_info	00000000 
000001ad l       .debug_info	00000000 
000001ad l       .debug_info	00000000 
000001ad l       .debug_info	00000000 
000001ad l       .debug_info	00000000 
000001ad l       .debug_info	00000000 
000001ad l       .debug_info	00000000 
000001ad l       .debug_info	00000000 
000001ad l       .debug_info	00000000 
000001ad l       .debug_info	00000000 
000001ad l       .debug_info	00000000 
000001ad l       .debug_info	00000000 
000001ad l       .debug_info	00000000 
000001ad l       .debug_info	00000000 
000001ad l       .debug_info	00000000 
000001ad l       .debug_info	00000000 
000001ad l       .debug_info	00000000 
000001ad l       .debug_info	00000000 
000001ad l       .debug_info	00000000 
000001ad l       .debug_info	00000000 
000001ad l       .debug_info	00000000 
00000000 g       *ABS*	00000000 __data_size
02000800 g       .data	00000000 __global_pointer$
02000000 g       .bss	00000000 __tls_base
00000400 g       *ABS*	00000000 __flash_size
00000008 g       *ABS*	00000000 __stack_size
00000000 g       *ABS*	00000000 __bss_size
00000308 g     F .text	00000024 memcpy
02000000 g       .bss	00000000 __bss_end
00000000 g       *ABS*	00000000 __tbss_size
00000300 g     F .text	00000008 _set_tls
00000000 g     F .init	00000000 _start
02000000 g       *ABS*	00000000 __ram
02000000 g       .bss	00000000 __data_end
00000348 g       .text	00000000 __text_end
02000000 g       .bss	00000000 __bss_start
0000032c g     F .text	0000001c memset
00000054 g     F .text	000002ac main
000001ad  w      .debug_info	00000000 .hidden path_planner.c.0bbc46fd
00000040 g       *ABS*	00000000 __ram_size
02000040 g       .init	00000000 __stack
00000000 g     F *ABS*	00000000 vfscanf
00000348 g       *ABS*	00000000 __data_source
00000000 g       *ABS*	00000000 __flash
02000000 g       .data	00000000 __data_start
00000000 g     F *ABS*	00000000 vfprintf



Disassembly of section .init:

00000000 <_start>:
   0:	    02000117          	auipc	x2,0x2000
   4:	    04010113          	addi	x2,x2,64 # 2000040 <__stack>
   8:	    02000197          	auipc	x3,0x2000
   c:	    7f818193          	addi	x3,x3,2040 # 2000800 <__global_pointer$>
  10:	    02000517          	auipc	x10,0x2000
  14:	    ff050513          	addi	x10,x10,-16 # 2000000 <__bss_end>
  18:	    34800593          	addi	x11,x0,840
  1c:	    00000613          	addi	x12,x0,0
  20:	    2e8000ef          	jal	x1,308 <memcpy>
  24:	    02000517          	auipc	x10,0x2000
  28:	    fdc50513          	addi	x10,x10,-36 # 2000000 <__bss_end>
  2c:	    00000593          	addi	x11,x0,0
  30:	    00000613          	addi	x12,x0,0
  34:	    2f8000ef          	jal	x1,32c <memset>
  38:	    02000517          	auipc	x10,0x2000
  3c:	    fc850513          	addi	x10,x10,-56 # 2000000 <__bss_end>
  40:	    2c0000ef          	jal	x1,300 <_set_tls>
  44:	    00000513          	addi	x10,x0,0
  48:	    00000593          	addi	x11,x0,0
  4c:	    008000ef          	jal	x1,54 <main>
  50:	/-- 0000006f          	jal	x0,50 <__ram_size+0x10>

Disassembly of section .text:

00000054 <main>:
     ###     }
     ###     return idx;
     ### }
     ### 
     ### // Main function.
     ### int main(int argc, char const *argv[]) {
  54:	                            ff010113          	addi	x2,x2,-16
  58:	                            00112623          	sw	x1,12(x2)
  5c:	                            00812423          	sw	x8,8(x2)
  60:	                            00912223          	sw	x9,4(x2)
     ###         0b10010000100000000000000000000000, // NODE 30
     ###         0b01000000000000000000000000000000  // NODE 31  
     ###     };
     ### #else
     ###     uint32_t *graph = (uint32_t *) 0x02000010;
     ###     graph[0]=0b00000000000000000000010001000010; // NODE 0
  64:	                            02000437          	lui	x8,0x2000
     ### int main(int argc, char const *argv[]) {
  68:	                            01212023          	sw	x18,0(x2)
     ###     graph[1]=0b00000000000000000000100000000101; // NODE 1
  6c:	                            00001737          	lui	x14,0x1
     ###     graph[0]=0b00000000000000000000010001000010; // NODE 0
  70:	                            44200793          	addi	x15,x0,1090
  74:	                            00f42823          	sw	x15,16(x8) # 2000010 <__bss_end+0x10>
     ###     graph[1]=0b00000000000000000000100000000101; // NODE 1
  78:	                            80570793          	addi	x15,x14,-2043 # 805 <__flash_size+0x405>
  7c:	                            00f42a23          	sw	x15,20(x8)
     ###     graph[2]=0b00000000000000000000000000111010; // NODE 2
  80:	                            03a00793          	addi	x15,x0,58
  84:	                            00f42c23          	sw	x15,24(x8)
     ###     graph[3]=0b00000000000000000000000000000100; // NODE 3
  88:	                            00400793          	addi	x15,x0,4
  8c:	                            00f42e23          	sw	x15,28(x8)
     ###     graph[4]=0b00000000000000000000000000000100; // NODE 4
  90:	                            02f42023          	sw	x15,32(x8)
     ###     graph[5]=0b00000000000000000000000000000100; // NODE 5
  94:	                            02f42223          	sw	x15,36(x8)
     ###     graph[6]=0b00000000000000000000001110000001; // NODE 6
  98:	                            38100793          	addi	x15,x0,897
  9c:	                            02f42423          	sw	x15,40(x8)
     ###     graph[7]=0b00000000000000000000000001000000; // NODE 7
  a0:	                            04000793          	addi	x15,x0,64
  a4:	                            02f42623          	sw	x15,44(x8)
     ###     graph[8]=0b00000000000000000000000001000000; // NODE 8
  a8:	                            02f42823          	sw	x15,48(x8)
     ###     graph[9]=0b00000000000000000000000001000000; // NODE 9
  ac:	                            02f42a23          	sw	x15,52(x8)
     ###     graph[10]=0b00000101000000000000000000000001; // NODE 10
  b0:	                            050007b7          	lui	x15,0x5000
  b4:	                            00178793          	addi	x15,x15,1 # 5000001 <__global_pointer$+0x2fff801>
  b8:	                            02f42c23          	sw	x15,56(x8)
     ###     graph[11]=0b00000000000010000001000000000010; // NODE 11
  bc:	                            000817b7          	lui	x15,0x81
  c0:	                            00278793          	addi	x15,x15,2 # 81002 <__flash_size+0x80c02>
  c4:	                            02f42e23          	sw	x15,60(x8)
     ###     graph[12]=0b00000000000000000110100000000000; // NODE 12
  c8:	                            000077b7          	lui	x15,0x7
  cc:	                            80078793          	addi	x15,x15,-2048 # 6800 <__flash_size+0x6400>
  d0:	                            04f42023          	sw	x15,64(x8)
     ###     graph[13]=0b00000000000000000001000000000000; // NODE 13
     ###     graph[14]=0b00000000000000011001000000000000; // NODE 14
  d4:	                            000197b7          	lui	x15,0x19
  d8:	                            04f42423          	sw	x15,72(x8)
     ###     graph[15]=0b00000000000000000100000000000000; // NODE 15
  dc:	                            000047b7          	lui	x15,0x4
  e0:	                            04f42623          	sw	x15,76(x8)
     ###     graph[16]=0b00000000000001100100000000000000; // NODE 16
  e4:	                            000647b7          	lui	x15,0x64
  e8:	                            04f42823          	sw	x15,80(x8)
     ###     graph[17]=0b00000000000000010000000000000000; // NODE 17
  ec:	                            000107b7          	lui	x15,0x10
  f0:	                            04f42a23          	sw	x15,84(x8)
     ###     graph[18]=0b00000000001010010000000000000000; // NODE 18
  f4:	                            002907b7          	lui	x15,0x290
  f8:	                            04f42c23          	sw	x15,88(x8)
     ###     graph[19]=0b00000000000101000000100000000000; // NODE 19
  fc:	                            001417b7          	lui	x15,0x141
 100:	                            80078793          	addi	x15,x15,-2048 # 140800 <__flash_size+0x140400>
 104:	                            04f42e23          	sw	x15,92(x8)
     ###     graph[20]=0b00000000000010000000000000000000; // NODE 20
 108:	                            000807b7          	lui	x15,0x80
 10c:	                            06f42023          	sw	x15,96(x8)
     ###     graph[21]=0b00000000110001000000000000000000; // NODE 21
 110:	                            00c407b7          	lui	x15,0xc40
 114:	                            06f42223          	sw	x15,100(x8)
     ###     graph[22]=0b00000000001000000000000000000000; // NODE 22
 118:	                            002007b7          	lui	x15,0x200
 11c:	                            06f42423          	sw	x15,104(x8)
     ###     graph[23]=0b01000001001000000000000000000000; // NODE 23
 120:	                            412007b7          	lui	x15,0x41200
 124:	                            06f42623          	sw	x15,108(x8)
     ###     graph[24]=0b00000010100000000000010000000000; // NODE 24
 128:	                            028007b7          	lui	x15,0x2800
 12c:	                            40078793          	addi	x15,x15,1024 # 2800400 <__global_pointer$+0x7ffc00>
 130:	                            06f42823          	sw	x15,112(x8)
     ###     graph[25]=0b00000001000000000000000000000000; // NODE 25
 134:	                            010007b7          	lui	x15,0x1000
 138:	                            06f42a23          	sw	x15,116(x8)
     ###     graph[26]=0b00011000000000000000010000000000; // NODE 26
 13c:	                            180007b7          	lui	x15,0x18000
 140:	                            40078793          	addi	x15,x15,1024 # 18000400 <__global_pointer$+0x15fffc00>
 144:	                            06f42c23          	sw	x15,120(x8)
     ###     graph[27]=0b00000100000000000000000000000000; // NODE 27
 148:	                            040007b7          	lui	x15,0x4000
     ###     graph[13]=0b00000000000000000001000000000000; // NODE 13
 14c:	                            04e42223          	sw	x14,68(x8)
     ###     graph[27]=0b00000100000000000000000000000000; // NODE 27
 150:	                            06f42e23          	sw	x15,124(x8)
     ###     graph[28]=0b01100100000000000000000000000000; // NODE 28 
 154:	                            640007b7          	lui	x15,0x64000
 158:	                            08f42023          	sw	x15,128(x8)
     ###     graph[29]=0b00010000000000000000000000000000; // NODE 29
 15c:	                            100007b7          	lui	x15,0x10000
 160:	                            08f42223          	sw	x15,132(x8)
     ###     graph[30]=0b10010000100000000000000000000000; // NODE 30
 164:	                            908007b7          	lui	x15,0x90800
     ### #else
     ###     uint8_t *path_planned = (uint8_t *)0x020000d0;
     ### #endif
     ### 
     ###     uint8_t idx = 0;
     ###     idx = flood_fill(START_POINT, END_POINT, graph, path_planned, idx);
 168:	                            00044903          	lbu	x18,0(x8)
     ###     graph[30]=0b10010000100000000000000000000000; // NODE 30
 16c:	                            08f42423          	sw	x15,136(x8)
     ###     graph[31]=0b01000000000000000000000000000000; // NODE 31
 170:	                            400007b7          	lui	x15,0x40000
 174:	                            08f42623          	sw	x15,140(x8)
     ###     *visitedMask_ptr = 0;  // initialize the bitmask to 0 (no nodes visited)
 178:	                            0c042e23          	sw	x0,220(x8)
     ###         parent[i] = 255;
 17c:	                            02000613          	addi	x12,x0,32
 180:	                            0ff00593          	addi	x11,x0,255
 184:	                            0b040513          	addi	x10,x8,176
     ###     idx = flood_fill(START_POINT, END_POINT, graph, path_planned, idx);
 188:	                            00444483          	lbu	x9,4(x8)
     ###         parent[i] = 255;
 18c:	                            1a0000ef          	jal	x1,32c <memset>
     ###     idx = flood_fill(START_POINT, END_POINT, graph, path_planned, idx);
 190:	                            0ff97913          	andi	x18,x18,255
     ###     visitedMask |= (1 << start);
 194:	                            00100793          	addi	x15,x0,1
 198:	                            01279733          	sll	x14,x15,x18
 19c:	                            0dc42783          	lw	x15,220(x8)
     ###         uint8_t current = queue[front++];
 1a0:	                            020006b7          	lui	x13,0x2000
     ###     idx = flood_fill(START_POINT, END_POINT, graph, path_planned, idx);
 1a4:	                            0ff4f493          	andi	x9,x9,255
     ###     visitedMask |= (1 << start);
 1a8:	                            00e7e7b3          	or	x15,x15,x14
 1ac:	                            0cf42e23          	sw	x15,220(x8)
     ###     queue[rear++] = start;
 1b0:	                            09240823          	sb	x18,144(x8)
 1b4:	                            00100713          	addi	x14,x0,1
     ###     uint8_t front = 0, rear = 0;
 1b8:	                            00000793          	addi	x15,x0,0
     ###             if (!(visitedMask & (1 << neighbor)) && (graph[current] & (1 << neighbor))) {
 1bc:	                            01068e93          	addi	x29,x13,16 # 2000010 <__bss_end+0x10>
 1c0:	                            00100f13          	addi	x30,x0,1
     ###         for (uint8_t neighbor = 0; neighbor < V; ++neighbor) {
 1c4:	                            02000f93          	addi	x31,x0,32
     ###     while (front < rear) {
 1c8:	   /--------------------/-X 08e7e063          	bltu	x15,x14,248 <path_planner.c.0bbc46fd+0x9b>
     ###         path_planned[idx++] = current;
 1cc:	   |                    |   02000737          	lui	x14,0x2000
     ###     while (front < rear) {
 1d0:	   |                    |   00000693          	addi	x13,x0,0
     ###         path_planned[idx++] = current;
 1d4:	   |                    |   0d070793          	addi	x15,x14,208 # 20000d0 <__stack+0x90>
     ###         current = parent[current];
 1d8:	   |                    |   0b070613          	addi	x12,x14,176
     ###         path_planned[idx++] = current;
 1dc:	/--|--------------------|-> 00168713          	addi	x14,x13,1
 1e0:	|  |                    |   0ff77713          	andi	x14,x14,255
 1e4:	|  |                    |   00f686b3          	add	x13,x13,x15
     ###     while (current != start) {
 1e8:	|  |        /-----------|-- 0c991a63          	bne	x18,x9,2bc <path_planner.c.0bbc46fd+0x10f>
     ###     path_planned[idx++] = start;
 1ec:	|  |        |           |   01268023          	sb	x18,0(x13)
 1f0:	|  |        |           |   040006b7          	lui	x13,0x4000
 1f4:	|  |        |           |   19f68693          	addi	x13,x13,415 # 400019f <__global_pointer$+0x1fff99f>
     ###     for (uint8_t i = 0; i < idx / 2; i++) {
 1f8:	|  |        |           |   00175593          	srli	x11,x14,0x1
 1fc:	|  |        |           |   00d706b3          	add	x13,x14,x13
 200:	|  |  /-----|-----------|-> 03078613          	addi	x12,x15,48 # 40000030 <__global_pointer$+0x3dfff830>
 204:	|  |  |     |           |   0ff67613          	andi	x12,x12,255
 208:	|  |  |     |     /-----|-- 0cb66463          	bltu	x12,x11,2d0 <path_planner.c.0bbc46fd+0x123>
     ###     _put_str("Path length: ");
     ###     _put_value(path_length);
     ### #else
     ###     // For the target hardware, assume a memory-mapped register at address 0x020000e0 for path length.
     ###     #define PATH_LENGTH_REG (* (volatile uint8_t *)0x020000e0)
     ###     PATH_LENGTH_REG = idx;
 20c:	|  |  |     |     |     |   020007b7          	lui	x15,0x2000
 210:	|  |  |     |     |     |   0ee78023          	sb	x14,224(x15) # 20000e0 <__stack+0xa0>
     ### #endif
     ### 
     ###     // Update NODE_POINT sequentially along the planned path.
     ###     for (int i = 0; i < idx; ++i) {
     ###         NODE_POINT = path_planned[i];
 214:	|  |  |     |     |     |   020006b7          	lui	x13,0x2000
     ###     for (int i = 0; i < idx; ++i) {
 218:	|  |  |     |     |     |   00000793          	addi	x15,x0,0
 21c:	|  |  |  /--|--/--|-----|-X 0ce7c863          	blt	x15,x14,2ec <path_planner.c.0bbc46fd+0x13f>
     ###     for (int i = 0; i < idx; ++i) {
     ###         _put_value(path_planned[i]);
     ###     }
     ###     _put_str("################################\n");
     ### #else
     ###     CPU_DONE = 1;
 220:	|  |  |  |  |  |  |     |   020007b7          	lui	x15,0x2000
 224:	|  |  |  |  |  |  |     |   00100713          	addi	x14,x0,1
 228:	|  |  |  |  |  |  |     |   00e78623          	sb	x14,12(x15) # 200000c <__bss_end+0xc>
     ### #endif
     ### 
     ###     return 0;
     ### }
 22c:	|  |  |  |  |  |  |     |   00c12083          	lw	x1,12(x2)
 230:	|  |  |  |  |  |  |     |   00812403          	lw	x8,8(x2)
 234:	|  |  |  |  |  |  |     |   00412483          	lw	x9,4(x2)
 238:	|  |  |  |  |  |  |     |   00012903          	lw	x18,0(x2)
 23c:	|  |  |  |  |  |  |     |   00000513          	addi	x10,x0,0
 240:	|  |  |  |  |  |  |     |   01010113          	addi	x2,x2,16
 244:	|  |  |  |  |  |  |     |   00008067          	jalr	x0,0(x1)
     ###         uint8_t current = queue[front++];
 248:	|  |  |  |  |  |  |     \-> 00178593          	addi	x11,x15,1
 24c:	|  |  |  |  |  |  |         00f687b3          	add	x15,x13,x15
 250:	|  |  |  |  |  |  |         0907c303          	lbu	x6,144(x15)
 254:	|  |  |  |  |  |  |         0ff5f593          	andi	x11,x11,255
     ###             if (!(visitedMask & (1 << neighbor)) && (graph[current] & (1 << neighbor))) {
 258:	|  |  |  |  |  |  |         00000613          	addi	x12,x0,0
 25c:	|  |  |  |  |  |  |         00231513          	slli	x10,x6,0x2
 260:	|  |  |  |  |  |  |         01d50533          	add	x10,x10,x29
 264:	|  |  |  |  |  |  |  /----> 0dc6a783          	lw	x15,220(x13) # 20000dc <__stack+0x9c>
 268:	|  |  |  |  |  |  |  |      00cf1833          	sll	x16,x30,x12
 26c:	|  |  |  |  |  |  |  |      0ff67e13          	andi	x28,x12,255
 270:	|  |  |  |  |  |  |  |      0107f8b3          	and	x17,x15,x16
 274:	|  |  |  |  |  |  |  |  /-- 02089c63          	bne	x17,x0,2ac <path_planner.c.0bbc46fd+0xff>
 278:	|  |  |  |  |  |  |  |  |   00052883          	lw	x17,0(x10)
 27c:	|  |  |  |  |  |  |  |  |   011878b3          	and	x17,x16,x17
 280:	|  |  |  |  |  |  |  |  +-- 02088663          	beq	x17,x0,2ac <path_planner.c.0bbc46fd+0xff>
     ###                 visitedMask |= (1 << neighbor);  // Mark neighbor as visited.
 284:	|  |  |  |  |  |  |  |  |   0107e7b3          	or	x15,x15,x16
 288:	|  |  |  |  |  |  |  |  |   0cf6ae23          	sw	x15,220(x13)
     ###                 parent[neighbor] = current;
 28c:	|  |  |  |  |  |  |  |  |   00c687b3          	add	x15,x13,x12
 290:	|  |  |  |  |  |  |  |  |   0a678823          	sb	x6,176(x15)
     ###                 queue[rear++] = neighbor;
 294:	|  |  |  |  |  |  |  |  |   00170793          	addi	x15,x14,1
 298:	|  |  |  |  |  |  |  |  |   00e68733          	add	x14,x13,x14
 29c:	|  |  |  |  |  |  |  |  |   0ff7f793          	andi	x15,x15,255
 2a0:	|  |  |  |  |  |  |  |  |   09c70823          	sb	x28,144(x14)
 2a4:	|  |  |  |  |  |  |  |  |   00078713          	addi	x14,x15,0
     ###                 if (neighbor == end) {
 2a8:	|  +--|--|--|--|--|--|--|-- f3c480e3          	beq	x9,x28,1c8 <path_planner.c.0bbc46fd+0x1b>
     ###         for (uint8_t neighbor = 0; neighbor < V; ++neighbor) {
 2ac:	|  |  |  |  |  |  |  |  \-> 00160613          	addi	x12,x12,1
 2b0:	|  |  |  |  |  |  |  \----- fbf61ae3          	bne	x12,x31,264 <path_planner.c.0bbc46fd+0xb7>
     ###         uint8_t current = queue[front++];
 2b4:	|  |  |  |  |  |  |         00058793          	addi	x15,x11,0
 2b8:	|  \--|--|--|--|--|-------- f11ff06f          	jal	x0,1c8 <path_planner.c.0bbc46fd+0x1b>
     ###         path_planned[idx++] = current;
 2bc:	|     |  |  \--|--|-------> 00968023          	sb	x9,0(x13)
     ###         current = parent[current];
 2c0:	|     |  |     |  |         00c484b3          	add	x9,x9,x12
 2c4:	|     |  |     |  |         0004c483          	lbu	x9,0(x9)
     ###         path_planned[idx++] = current;
 2c8:	|     |  |     |  |         00070693          	addi	x13,x14,0
 2cc:	\-----|--|-----|--|-------- f11ff06f          	jal	x0,1dc <path_planner.c.0bbc46fd+0x2f>
 2d0:	      |  |     |  \-------> 40f68633          	sub	x12,x13,x15
     ###         path_planned[i] = path_planned[idx - 1 - i];
 2d4:	      |  |     |            00064803          	lbu	x16,0(x12)
     ###         uint8_t temp = path_planned[i];
 2d8:	      |  |     |            0007c503          	lbu	x10,0(x15)
 2dc:	      |  |     |            00178793          	addi	x15,x15,1
     ###         path_planned[i] = path_planned[idx - 1 - i];
 2e0:	      |  |     |            ff078fa3          	sb	x16,-1(x15)
     ###         path_planned[idx - 1 - i] = temp;
 2e4:	      |  |     |            00a60023          	sb	x10,0(x12)
 2e8:	      \--|-----|----------- f19ff06f          	jal	x0,200 <path_planner.c.0bbc46fd+0x53>
     ###         NODE_POINT = path_planned[i];
 2ec:	         |     \----------> 00f68633          	add	x12,x13,x15
 2f0:	         |                  0d064603          	lbu	x12,208(x12)
     ###     for (int i = 0; i < idx; ++i) {
 2f4:	         |                  00178793          	addi	x15,x15,1
     ###         NODE_POINT = path_planned[i];
 2f8:	         |                  00c68423          	sb	x12,8(x13)
     ###     for (int i = 0; i < idx; ++i) {
 2fc:	         \----------------- f21ff06f          	jal	x0,21c <path_planner.c.0bbc46fd+0x6f>

00000300 <_set_tls>:
 300:	00050213          	addi	x4,x10,0
 304:	00008067          	jalr	x0,0(x1)

00000308 <memcpy>:
 308:	       00050313          	addi	x6,x10,0
 30c:	/----- 00060e63          	beq	x12,x0,328 <memcpy+0x20>
 310:	|  /-> 00058383          	lb	x7,0(x11)
 314:	|  |   00730023          	sb	x7,0(x6)
 318:	|  |   fff60613          	addi	x12,x12,-1
 31c:	|  |   00130313          	addi	x6,x6,1
 320:	|  |   00158593          	addi	x11,x11,1
 324:	|  \-- fe0616e3          	bne	x12,x0,310 <memcpy+0x8>
 328:	\----> 00008067          	jalr	x0,0(x1)

0000032c <memset>:
 32c:	       00050313          	addi	x6,x10,0
 330:	/----- 00060a63          	beq	x12,x0,344 <memset+0x18>
 334:	|  /-> 00b30023          	sb	x11,0(x6)
 338:	|  |   fff60613          	addi	x12,x12,-1
 33c:	|  |   00130313          	addi	x6,x6,1
 340:	|  \-- fe061ae3          	bne	x12,x0,334 <memset+0x8>
 344:	\----> 00008067          	jalr	x0,0(x1)
