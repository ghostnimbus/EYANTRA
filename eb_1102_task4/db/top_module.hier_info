|top_module
adc_cs_n <= ADC_Controller:inst.adc_cs_n
dout => ADC_Controller:inst.dout
clk_50M => frequency_scaling:inst7.clk_50M
clk_50M => pwm_generator:inst10.clk_50MHz
din <= ADC_Controller:inst.din
adc_clk <= frequency_scaling:inst7.adc_clk_out
enA <= black_line_following:inst2.enA
reset => black_line_following:inst2.reset
reset => turn_direction_logic:inst5.reset
reset => start_detector:inst4.reset
rx => uart_rx:inst3.rx
enB <= black_line_following:inst2.enB
in1 <= black_line_following:inst2.in1
in2 <= black_line_following:inst2.in2
in3 <= black_line_following:inst2.in3
in4 <= black_line_following:inst2.in4
tx <= uart_tx:inst1.tx
cs_out => color_sensor:inst6.cs_out
filter[0] <= color_sensor:inst6.filter[0]
filter[1] <= color_sensor:inst6.filter[1]
rgb1[0] <= led_logic:inst8.rgb1[0]
rgb1[1] <= led_logic:inst8.rgb1[1]
rgb1[2] <= led_logic:inst8.rgb1[2]
rgb2[0] <= led_logic:inst8.rgb2[0]
rgb2[1] <= led_logic:inst8.rgb2[1]
rgb2[2] <= led_logic:inst8.rgb2[2]
rgb3[0] <= led_logic:inst8.rgb3[0]
rgb3[1] <= led_logic:inst8.rgb3[1]
rgb3[2] <= led_logic:inst8.rgb3[2]


|top_module|ADC_Controller:inst
dout => dout_chx[0].DATAIN
adc_sck => sp_counter[0].CLK
adc_sck => sp_counter[1].CLK
adc_sck => sp_counter[2].CLK
adc_sck => sp_counter[3].CLK
adc_sck => dout_chx[0].CLK
adc_sck => dout_chx[1].CLK
adc_sck => dout_chx[2].CLK
adc_sck => dout_chx[3].CLK
adc_sck => dout_chx[4].CLK
adc_sck => dout_chx[5].CLK
adc_sck => dout_chx[6].CLK
adc_sck => dout_chx[7].CLK
adc_sck => dout_chx[8].CLK
adc_sck => dout_chx[9].CLK
adc_sck => dout_chx[10].CLK
adc_sck => dout_chx[11].CLK
adc_sck => dout_ch1[0].CLK
adc_sck => dout_ch1[1].CLK
adc_sck => dout_ch1[2].CLK
adc_sck => dout_ch1[3].CLK
adc_sck => dout_ch1[4].CLK
adc_sck => dout_ch1[5].CLK
adc_sck => dout_ch1[6].CLK
adc_sck => dout_ch1[7].CLK
adc_sck => dout_ch1[8].CLK
adc_sck => dout_ch1[9].CLK
adc_sck => dout_ch1[10].CLK
adc_sck => dout_ch1[11].CLK
adc_sck => dout_ch3[0].CLK
adc_sck => dout_ch3[1].CLK
adc_sck => dout_ch3[2].CLK
adc_sck => dout_ch3[3].CLK
adc_sck => dout_ch3[4].CLK
adc_sck => dout_ch3[5].CLK
adc_sck => dout_ch3[6].CLK
adc_sck => dout_ch3[7].CLK
adc_sck => dout_ch3[8].CLK
adc_sck => dout_ch3[9].CLK
adc_sck => dout_ch3[10].CLK
adc_sck => dout_ch3[11].CLK
adc_sck => dout_ch4[0].CLK
adc_sck => dout_ch4[1].CLK
adc_sck => dout_ch4[2].CLK
adc_sck => dout_ch4[3].CLK
adc_sck => dout_ch4[4].CLK
adc_sck => dout_ch4[5].CLK
adc_sck => dout_ch4[6].CLK
adc_sck => dout_ch4[7].CLK
adc_sck => dout_ch4[8].CLK
adc_sck => dout_ch4[9].CLK
adc_sck => dout_ch4[10].CLK
adc_sck => dout_ch4[11].CLK
adc_sck => data_counter[0].CLK
adc_sck => data_counter[1].CLK
adc_sck => data_counter[2].CLK
adc_sck => data_counter[3].CLK
adc_sck => data_counter[4].CLK
adc_sck => din_counter[0].CLK
adc_sck => din_counter[1].CLK
adc_sck => din_counter[2].CLK
adc_sck => din_counter[3].CLK
adc_sck => din_temp.CLK
adc_sck => channel[0].CLK
adc_sck => channel[1].CLK
adc_sck => channel[2].CLK
adc_sck => channel_select[0].CLK
adc_sck => channel_select[1].CLK
adc_sck => channel_select[2].CLK
adc_sck => adc_cs.CLK
adc_sck => mem1[2][0].CLK
adc_sck => mem1[2][1].CLK
adc_sck => mem1[2][2].CLK
adc_sck => mem1[1][0].CLK
adc_sck => mem1[1][1].CLK
adc_sck => mem1[1][2].CLK
adc_sck => mem1[0][0].CLK
adc_sck => mem1[0][1].CLK
adc_sck => mem1[0][2].CLK
adc_sck => init.CLK
adc_cs_n <= adc_cs.DB_MAX_OUTPUT_PORT_TYPE
din <= din_temp.DB_MAX_OUTPUT_PORT_TYPE
line_sensor[0] <= LessThan7.DB_MAX_OUTPUT_PORT_TYPE
line_sensor[1] <= LessThan6.DB_MAX_OUTPUT_PORT_TYPE
line_sensor[2] <= LessThan5.DB_MAX_OUTPUT_PORT_TYPE


|top_module|frequency_scaling:inst7
clk_50M => s_clk_counter[0].CLK
clk_50M => s_clk_counter[1].CLK
clk_50M => s_clk_counter[2].CLK
clk_50M => adc_clk_out~reg0.CLK
adc_clk_out <= adc_clk_out~reg0.DB_MAX_OUTPUT_PORT_TYPE


|top_module|black_line_following:inst2
clk => in3~reg0.CLK
clk => in4~reg0.CLK
clk => in1~reg0.CLK
clk => in2~reg0.CLK
clk => enB~reg0.CLK
clk => enA~reg0.CLK
clk => current_state~1.DATAIN
reset => in3~reg0.ACLR
reset => in4~reg0.ACLR
reset => in1~reg0.ACLR
reset => in2~reg0.ACLR
reset => enB~reg0.ACLR
reset => enA~reg0.ACLR
reset => current_state~3.DATAIN
line_sensor[0] => Mux0.IN3
line_sensor[0] => Mux1.IN3
line_sensor[0] => Decoder1.IN2
line_sensor[0] => Equal0.IN2
line_sensor[1] => Mux0.IN2
line_sensor[1] => Mux1.IN2
line_sensor[1] => Decoder1.IN1
line_sensor[1] => Equal0.IN1
line_sensor[2] => Mux0.IN1
line_sensor[2] => Mux1.IN1
line_sensor[2] => Decoder1.IN0
line_sensor[2] => Equal0.IN0
robot_enabled => always1.IN1
robot_enabled => next_state.DATAA
robot_enabled => next_state.OUTPUTSELECT
robot_enabled => next_state.OUTPUTSELECT
robot_enabled => Selector0.IN2
robot_enabled => next_state.DATAA
turn_direction[0] => Decoder0.IN1
turn_direction[1] => Decoder0.IN0
pwm_f => enA.DATAA
pwm_f => enB.DATAA
pwm_f => Mux0.IN4
pwm_f => Mux0.IN5
pwm_f => Mux0.IN6
pwm_f => Mux0.IN7
pwm_f => Mux0.IN8
pwm_f => Mux1.IN4
pwm_f => Mux1.IN5
pwm_f => Mux1.IN6
pwm_f => Mux1.IN7
pwm_f => Mux1.IN8
pwm_b => Mux0.IN9
pwm_b => Mux0.IN10
pwm_b => Mux1.IN9
pwm_b => Mux1.IN10
enA <= enA~reg0.DB_MAX_OUTPUT_PORT_TYPE
enB <= enB~reg0.DB_MAX_OUTPUT_PORT_TYPE
in2 <= in2~reg0.DB_MAX_OUTPUT_PORT_TYPE
in1 <= in1~reg0.DB_MAX_OUTPUT_PORT_TYPE
in4 <= in4~reg0.DB_MAX_OUTPUT_PORT_TYPE
in3 <= in3~reg0.DB_MAX_OUTPUT_PORT_TYPE


|top_module|start_detector:inst4
clk => robot_enabled~reg0.CLK
clk => command_buffer[4][0].CLK
clk => command_buffer[4][1].CLK
clk => command_buffer[4][2].CLK
clk => command_buffer[4][3].CLK
clk => command_buffer[4][4].CLK
clk => command_buffer[4][5].CLK
clk => command_buffer[4][6].CLK
clk => command_buffer[4][7].CLK
clk => command_buffer[3][0].CLK
clk => command_buffer[3][1].CLK
clk => command_buffer[3][2].CLK
clk => command_buffer[3][3].CLK
clk => command_buffer[3][4].CLK
clk => command_buffer[3][5].CLK
clk => command_buffer[3][6].CLK
clk => command_buffer[3][7].CLK
clk => command_buffer[2][0].CLK
clk => command_buffer[2][1].CLK
clk => command_buffer[2][2].CLK
clk => command_buffer[2][3].CLK
clk => command_buffer[2][4].CLK
clk => command_buffer[2][5].CLK
clk => command_buffer[2][6].CLK
clk => command_buffer[2][7].CLK
clk => command_buffer[1][0].CLK
clk => command_buffer[1][1].CLK
clk => command_buffer[1][2].CLK
clk => command_buffer[1][3].CLK
clk => command_buffer[1][4].CLK
clk => command_buffer[1][5].CLK
clk => command_buffer[1][6].CLK
clk => command_buffer[1][7].CLK
clk => command_buffer[0][0].CLK
clk => command_buffer[0][1].CLK
clk => command_buffer[0][2].CLK
clk => command_buffer[0][3].CLK
clk => command_buffer[0][4].CLK
clk => command_buffer[0][5].CLK
clk => command_buffer[0][6].CLK
clk => command_buffer[0][7].CLK
Done => robot_enabled.OUTPUTSELECT
reset => robot_enabled~reg0.ACLR
reset => command_buffer[4][0].ACLR
reset => command_buffer[4][1].ACLR
reset => command_buffer[4][2].ACLR
reset => command_buffer[4][3].ACLR
reset => command_buffer[4][4].ACLR
reset => command_buffer[4][5].ACLR
reset => command_buffer[4][6].ACLR
reset => command_buffer[4][7].ACLR
reset => command_buffer[3][0].ACLR
reset => command_buffer[3][1].ACLR
reset => command_buffer[3][2].ACLR
reset => command_buffer[3][3].ACLR
reset => command_buffer[3][4].ACLR
reset => command_buffer[3][5].ACLR
reset => command_buffer[3][6].ACLR
reset => command_buffer[3][7].ACLR
reset => command_buffer[2][0].ACLR
reset => command_buffer[2][1].ACLR
reset => command_buffer[2][2].ACLR
reset => command_buffer[2][3].ACLR
reset => command_buffer[2][4].ACLR
reset => command_buffer[2][5].ACLR
reset => command_buffer[2][6].ACLR
reset => command_buffer[2][7].ACLR
reset => command_buffer[1][0].ACLR
reset => command_buffer[1][1].ACLR
reset => command_buffer[1][2].ACLR
reset => command_buffer[1][3].ACLR
reset => command_buffer[1][4].ACLR
reset => command_buffer[1][5].ACLR
reset => command_buffer[1][6].ACLR
reset => command_buffer[1][7].ACLR
reset => command_buffer[0][0].ACLR
reset => command_buffer[0][1].ACLR
reset => command_buffer[0][2].ACLR
reset => command_buffer[0][3].ACLR
reset => command_buffer[0][4].ACLR
reset => command_buffer[0][5].ACLR
reset => command_buffer[0][6].ACLR
reset => command_buffer[0][7].ACLR
rx_complete => command_buffer[0][7].ENA
rx_complete => command_buffer[0][6].ENA
rx_complete => command_buffer[0][5].ENA
rx_complete => command_buffer[0][4].ENA
rx_complete => command_buffer[0][3].ENA
rx_complete => command_buffer[0][2].ENA
rx_complete => command_buffer[0][1].ENA
rx_complete => command_buffer[0][0].ENA
rx_complete => command_buffer[1][7].ENA
rx_complete => command_buffer[1][6].ENA
rx_complete => command_buffer[1][5].ENA
rx_complete => command_buffer[1][4].ENA
rx_complete => command_buffer[1][3].ENA
rx_complete => command_buffer[1][2].ENA
rx_complete => command_buffer[1][1].ENA
rx_complete => command_buffer[1][0].ENA
rx_complete => command_buffer[2][7].ENA
rx_complete => command_buffer[2][6].ENA
rx_complete => command_buffer[2][5].ENA
rx_complete => command_buffer[2][4].ENA
rx_complete => command_buffer[2][3].ENA
rx_complete => command_buffer[2][2].ENA
rx_complete => command_buffer[2][1].ENA
rx_complete => command_buffer[2][0].ENA
rx_complete => command_buffer[3][7].ENA
rx_complete => command_buffer[3][6].ENA
rx_complete => command_buffer[3][5].ENA
rx_complete => command_buffer[3][4].ENA
rx_complete => command_buffer[3][3].ENA
rx_complete => command_buffer[3][2].ENA
rx_complete => command_buffer[3][1].ENA
rx_complete => command_buffer[3][0].ENA
rx_complete => command_buffer[4][7].ENA
rx_complete => command_buffer[4][6].ENA
rx_complete => command_buffer[4][5].ENA
rx_complete => command_buffer[4][4].ENA
rx_complete => command_buffer[4][3].ENA
rx_complete => command_buffer[4][2].ENA
rx_complete => command_buffer[4][1].ENA
rx_complete => command_buffer[4][0].ENA
data_in[0] => command_buffer[0][0].DATAIN
data_in[1] => command_buffer[0][1].DATAIN
data_in[2] => command_buffer[0][2].DATAIN
data_in[3] => command_buffer[0][3].DATAIN
data_in[4] => command_buffer[0][4].DATAIN
data_in[5] => command_buffer[0][5].DATAIN
data_in[6] => command_buffer[0][6].DATAIN
data_in[7] => command_buffer[0][7].DATAIN
robot_enabled <= robot_enabled~reg0.DB_MAX_OUTPUT_PORT_TYPE


|top_module|turn_direction_logic:inst5
clk => node_detected.CLK
clk => sequence_index[0].CLK
clk => sequence_index[1].CLK
clk => sequence_index[2].CLK
clk => sequence_index[3].CLK
clk => sequence_index[4].CLK
reset => node_detected.ACLR
reset => sequence_index[0].ACLR
reset => sequence_index[1].ACLR
reset => sequence_index[2].ACLR
reset => sequence_index[3].ACLR
reset => sequence_index[4].ACLR
line_sensor[0] => Equal0.IN2
line_sensor[1] => Equal0.IN1
line_sensor[2] => Equal0.IN0
turn_direction[0] <= <GND>
turn_direction[1] <= WideOr0.DB_MAX_OUTPUT_PORT_TYPE
lap_done <= Equal2.DB_MAX_OUTPUT_PORT_TYPE
Done <= Equal1.DB_MAX_OUTPUT_PORT_TYPE


|top_module|uart_rx:inst3
clk_3125 => rx_msg[0]~reg0.CLK
clk_3125 => rx_msg[1]~reg0.CLK
clk_3125 => rx_msg[2]~reg0.CLK
clk_3125 => rx_msg[3]~reg0.CLK
clk_3125 => rx_msg[4]~reg0.CLK
clk_3125 => rx_msg[5]~reg0.CLK
clk_3125 => rx_msg[6]~reg0.CLK
clk_3125 => rx_msg[7]~reg0.CLK
clk_3125 => rx_parity~reg0.CLK
clk_3125 => parity.CLK
clk_3125 => rx_data[0].CLK
clk_3125 => rx_data[1].CLK
clk_3125 => rx_data[2].CLK
clk_3125 => rx_data[3].CLK
clk_3125 => rx_data[4].CLK
clk_3125 => rx_data[5].CLK
clk_3125 => rx_data[6].CLK
clk_3125 => rx_data[7].CLK
clk_3125 => bit_counter[0].CLK
clk_3125 => bit_counter[1].CLK
clk_3125 => bit_counter[2].CLK
clk_3125 => sample_counter[0].CLK
clk_3125 => sample_counter[1].CLK
clk_3125 => sample_counter[2].CLK
clk_3125 => sample_counter[3].CLK
clk_3125 => sample_counter[4].CLK
clk_3125 => rx_complete~reg0.CLK
clk_3125 => state~6.DATAIN
rx => rx_data.DATAB
rx => rx_data.DATAB
rx => rx_data.DATAB
rx => rx_data.DATAB
rx => rx_data.DATAB
rx => rx_data.DATAB
rx => rx_data.DATAB
rx => rx_data.DATAB
rx => parity.DATAB
rx => state.OUTPUTSELECT
rx => state.OUTPUTSELECT
rx => state.OUTPUTSELECT
rx => state.OUTPUTSELECT
rx => state.OUTPUTSELECT
rx_msg[0] <= rx_msg[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_msg[1] <= rx_msg[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_msg[2] <= rx_msg[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_msg[3] <= rx_msg[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_msg[4] <= rx_msg[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_msg[5] <= rx_msg[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_msg[6] <= rx_msg[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_msg[7] <= rx_msg[7]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_parity <= rx_parity~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_complete <= rx_complete~reg0.DB_MAX_OUTPUT_PORT_TYPE


|top_module|pwm_generator:inst10
clk_50MHz => counter_50MHz[0].CLK
clk_50MHz => counter_50MHz[1].CLK
clk_50MHz => counter_50MHz[2].CLK
clk_50MHz => counter_50MHz[3].CLK
clk_50MHz => counter_50MHz[4].CLK
clk_50MHz => clk_1MHz~reg0.CLK
clk_1MHz <= clk_1MHz~reg0.DB_MAX_OUTPUT_PORT_TYPE
pwm_f <= pwm_f~reg0.DB_MAX_OUTPUT_PORT_TYPE
pwm_b <= pwm_b~reg0.DB_MAX_OUTPUT_PORT_TYPE


|top_module|uart_tx:inst1
clk_3125 => tx_done~reg0.CLK
clk_3125 => baud_counter[0].CLK
clk_3125 => baud_counter[1].CLK
clk_3125 => baud_counter[2].CLK
clk_3125 => baud_counter[3].CLK
clk_3125 => baud_counter[4].CLK
clk_3125 => bit_count[0].CLK
clk_3125 => bit_count[1].CLK
clk_3125 => bit_count[2].CLK
clk_3125 => bit_count[3].CLK
clk_3125 => shift_reg[0].CLK
clk_3125 => shift_reg[1].CLK
clk_3125 => shift_reg[2].CLK
clk_3125 => shift_reg[3].CLK
clk_3125 => shift_reg[4].CLK
clk_3125 => shift_reg[5].CLK
clk_3125 => shift_reg[6].CLK
clk_3125 => shift_reg[7].CLK
clk_3125 => tx~reg0.CLK
clk_3125 => state~7.DATAIN
tx_start => tx.OUTPUTSELECT
tx_start => shift_reg.OUTPUTSELECT
tx_start => shift_reg.OUTPUTSELECT
tx_start => shift_reg.OUTPUTSELECT
tx_start => shift_reg.OUTPUTSELECT
tx_start => shift_reg.OUTPUTSELECT
tx_start => shift_reg.OUTPUTSELECT
tx_start => shift_reg.OUTPUTSELECT
tx_start => shift_reg.OUTPUTSELECT
tx_start => bit_count.OUTPUTSELECT
tx_start => bit_count.OUTPUTSELECT
tx_start => bit_count.OUTPUTSELECT
tx_start => bit_count.OUTPUTSELECT
tx_start => state.OUTPUTSELECT
tx_start => state.OUTPUTSELECT
tx_start => state.OUTPUTSELECT
tx_start => state.OUTPUTSELECT
tx_start => state.OUTPUTSELECT
tx_start => state.OUTPUTSELECT
data[0] => WideXor0.IN0
data[0] => shift_reg.DATAB
data[1] => WideXor0.IN1
data[1] => shift_reg.DATAB
data[2] => WideXor0.IN2
data[2] => shift_reg.DATAB
data[3] => WideXor0.IN3
data[3] => shift_reg.DATAB
data[4] => WideXor0.IN4
data[4] => shift_reg.DATAB
data[5] => WideXor0.IN5
data[5] => shift_reg.DATAB
data[6] => WideXor0.IN6
data[6] => shift_reg.DATAB
data[7] => WideXor0.IN7
data[7] => shift_reg.DATAB
tx <= tx~reg0.DB_MAX_OUTPUT_PORT_TYPE
tx_done <= tx_done~reg0.DB_MAX_OUTPUT_PORT_TYPE


|top_module|SLM:inst9
clk_3125 => tx_start~reg0.CLK
clk_3125 => tx_msg[0]~reg0.CLK
clk_3125 => tx_msg[1]~reg0.CLK
clk_3125 => tx_msg[2]~reg0.CLK
clk_3125 => tx_msg[3]~reg0.CLK
clk_3125 => tx_msg[4]~reg0.CLK
clk_3125 => tx_msg[5]~reg0.CLK
clk_3125 => tx_msg[6]~reg0.CLK
clk_3125 => tx_msg[7]~reg0.CLK
clk_3125 => index[0].CLK
clk_3125 => index[1].CLK
clk_3125 => index[2].CLK
clk_3125 => index[3].CLK
clk_3125 => fsu_count[0].CLK
clk_3125 => fsu_count[1].CLK
clk_3125 => message[13][0].CLK
clk_3125 => message[13][1].CLK
clk_3125 => message[13][2].CLK
clk_3125 => message[13][3].CLK
clk_3125 => message[13][4].CLK
clk_3125 => message[13][5].CLK
clk_3125 => message[13][6].CLK
clk_3125 => message[13][7].CLK
clk_3125 => message[12][0].CLK
clk_3125 => message[12][1].CLK
clk_3125 => message[12][2].CLK
clk_3125 => message[12][3].CLK
clk_3125 => message[12][4].CLK
clk_3125 => message[12][5].CLK
clk_3125 => message[12][6].CLK
clk_3125 => message[12][7].CLK
clk_3125 => message[11][0].CLK
clk_3125 => message[11][1].CLK
clk_3125 => message[11][2].CLK
clk_3125 => message[11][3].CLK
clk_3125 => message[11][4].CLK
clk_3125 => message[11][5].CLK
clk_3125 => message[11][6].CLK
clk_3125 => message[11][7].CLK
clk_3125 => message[10][0].CLK
clk_3125 => message[10][1].CLK
clk_3125 => message[10][2].CLK
clk_3125 => message[10][3].CLK
clk_3125 => message[10][4].CLK
clk_3125 => message[10][5].CLK
clk_3125 => message[10][6].CLK
clk_3125 => message[10][7].CLK
clk_3125 => message[9][0].CLK
clk_3125 => message[9][1].CLK
clk_3125 => message[9][2].CLK
clk_3125 => message[9][3].CLK
clk_3125 => message[9][4].CLK
clk_3125 => message[9][5].CLK
clk_3125 => message[9][6].CLK
clk_3125 => message[9][7].CLK
clk_3125 => message[8][0].CLK
clk_3125 => message[8][1].CLK
clk_3125 => message[8][2].CLK
clk_3125 => message[8][3].CLK
clk_3125 => message[8][4].CLK
clk_3125 => message[8][5].CLK
clk_3125 => message[8][6].CLK
clk_3125 => message[8][7].CLK
clk_3125 => message[7][0].CLK
clk_3125 => message[7][1].CLK
clk_3125 => message[7][2].CLK
clk_3125 => message[7][3].CLK
clk_3125 => message[7][4].CLK
clk_3125 => message[7][5].CLK
clk_3125 => message[7][6].CLK
clk_3125 => message[7][7].CLK
clk_3125 => message[6][0].CLK
clk_3125 => message[6][1].CLK
clk_3125 => message[6][2].CLK
clk_3125 => message[6][3].CLK
clk_3125 => message[6][4].CLK
clk_3125 => message[6][5].CLK
clk_3125 => message[6][6].CLK
clk_3125 => message[6][7].CLK
clk_3125 => message[5][0].CLK
clk_3125 => message[5][1].CLK
clk_3125 => message[5][2].CLK
clk_3125 => message[5][3].CLK
clk_3125 => message[5][4].CLK
clk_3125 => message[5][5].CLK
clk_3125 => message[5][6].CLK
clk_3125 => message[5][7].CLK
clk_3125 => message[4][0].CLK
clk_3125 => message[4][1].CLK
clk_3125 => message[4][2].CLK
clk_3125 => message[4][3].CLK
clk_3125 => message[4][4].CLK
clk_3125 => message[4][5].CLK
clk_3125 => message[4][6].CLK
clk_3125 => message[4][7].CLK
clk_3125 => state~4.DATAIN
color[0] => Decoder1.IN1
color[0] => message.DATAB
color[0] => Equal0.IN31
color[0] => Equal2.IN31
color[1] => Decoder1.IN0
color[1] => message.DATAB
color[1] => message.DATAB
color[1] => Equal0.IN30
color[1] => Equal2.IN30
tx_done => index.OUTPUTSELECT
tx_done => index.OUTPUTSELECT
tx_done => index.OUTPUTSELECT
tx_done => index.OUTPUTSELECT
tx_done => state.OUTPUTSELECT
tx_done => state.OUTPUTSELECT
tx_done => state.OUTPUTSELECT
tx_start <= tx_start~reg0.DB_MAX_OUTPUT_PORT_TYPE
tx_msg[0] <= tx_msg[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
tx_msg[1] <= tx_msg[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
tx_msg[2] <= tx_msg[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
tx_msg[3] <= tx_msg[3]~reg0.DB_MAX_OUTPUT_PORT_TYPE
tx_msg[4] <= tx_msg[4]~reg0.DB_MAX_OUTPUT_PORT_TYPE
tx_msg[5] <= tx_msg[5]~reg0.DB_MAX_OUTPUT_PORT_TYPE
tx_msg[6] <= tx_msg[6]~reg0.DB_MAX_OUTPUT_PORT_TYPE
tx_msg[7] <= tx_msg[7]~reg0.DB_MAX_OUTPUT_PORT_TYPE


|top_module|color_sensor:inst6
clk_1MHz => counter[0].CLK
clk_1MHz => counter[1].CLK
clk_1MHz => counter[2].CLK
clk_1MHz => counter[3].CLK
clk_1MHz => counter[4].CLK
clk_1MHz => counter[5].CLK
clk_1MHz => counter[6].CLK
clk_1MHz => counter[7].CLK
clk_1MHz => counter[8].CLK
clk_1MHz => counter[9].CLK
clk_1MHz => counter[10].CLK
clk_1MHz => counter[11].CLK
clk_1MHz => counter[12].CLK
clk_1MHz => counter[13].CLK
clk_1MHz => color[0]~reg0.CLK
clk_1MHz => color[1]~reg0.CLK
clk_1MHz => filter[0]~reg0.CLK
clk_1MHz => filter[1]~reg0.CLK
cs_out => blue_count[0].CLK
cs_out => blue_count[1].CLK
cs_out => blue_count[2].CLK
cs_out => blue_count[3].CLK
cs_out => blue_count[4].CLK
cs_out => blue_count[5].CLK
cs_out => blue_count[6].CLK
cs_out => blue_count[7].CLK
cs_out => blue_count[8].CLK
cs_out => blue_count[9].CLK
cs_out => blue_count[10].CLK
cs_out => blue_count[11].CLK
cs_out => blue_count[12].CLK
cs_out => blue_count[13].CLK
cs_out => blue_count[14].CLK
cs_out => blue_count[15].CLK
cs_out => green_count[0].CLK
cs_out => green_count[1].CLK
cs_out => green_count[2].CLK
cs_out => green_count[3].CLK
cs_out => green_count[4].CLK
cs_out => green_count[5].CLK
cs_out => green_count[6].CLK
cs_out => green_count[7].CLK
cs_out => green_count[8].CLK
cs_out => green_count[9].CLK
cs_out => green_count[10].CLK
cs_out => green_count[11].CLK
cs_out => green_count[12].CLK
cs_out => green_count[13].CLK
cs_out => green_count[14].CLK
cs_out => green_count[15].CLK
cs_out => red_count[0].CLK
cs_out => red_count[1].CLK
cs_out => red_count[2].CLK
cs_out => red_count[3].CLK
cs_out => red_count[4].CLK
cs_out => red_count[5].CLK
cs_out => red_count[6].CLK
cs_out => red_count[7].CLK
cs_out => red_count[8].CLK
cs_out => red_count[9].CLK
cs_out => red_count[10].CLK
cs_out => red_count[11].CLK
cs_out => red_count[12].CLK
cs_out => red_count[13].CLK
cs_out => red_count[14].CLK
cs_out => red_count[15].CLK
filter[0] <= filter[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
filter[1] <= filter[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
color[0] <= color[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
color[1] <= color[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE


|top_module|led_logic:inst8
clk_1MHz => toggle.CLK
clk_1MHz => counter[0].CLK
clk_1MHz => counter[1].CLK
clk_1MHz => counter[2].CLK
clk_1MHz => counter[3].CLK
clk_1MHz => counter[4].CLK
clk_1MHz => counter[5].CLK
clk_1MHz => counter[6].CLK
clk_1MHz => counter[7].CLK
clk_1MHz => counter[8].CLK
clk_1MHz => counter[9].CLK
clk_1MHz => counter[10].CLK
clk_1MHz => counter[11].CLK
clk_1MHz => counter[12].CLK
clk_1MHz => counter[13].CLK
clk_1MHz => counter[14].CLK
clk_1MHz => counter[15].CLK
clk_1MHz => counter[16].CLK
clk_1MHz => counter[17].CLK
clk_1MHz => counter[18].CLK
clk_1MHz => counter[19].CLK
clk_1MHz => rgb3[0]~reg0.CLK
clk_1MHz => rgb3[1]~reg0.CLK
clk_1MHz => rgb3[2]~reg0.CLK
clk_1MHz => rgb2[0]~reg0.CLK
clk_1MHz => rgb2[1]~reg0.CLK
clk_1MHz => rgb2[2]~reg0.CLK
clk_1MHz => rgb1[0]~reg0.CLK
clk_1MHz => rgb1[1]~reg0.CLK
clk_1MHz => rgb1[2]~reg0.CLK
clk_1MHz => patch_enable~reg0.CLK
clk_1MHz => led_no~4.DATAIN
Done => rgb1.OUTPUTSELECT
Done => rgb1.OUTPUTSELECT
Done => rgb1.OUTPUTSELECT
Done => rgb2.OUTPUTSELECT
Done => rgb2.OUTPUTSELECT
Done => rgb2.OUTPUTSELECT
Done => rgb3.OUTPUTSELECT
Done => rgb3.OUTPUTSELECT
Done => rgb3.OUTPUTSELECT
Done => toggle.ENA
Done => counter[0].ENA
Done => counter[1].ENA
Done => counter[2].ENA
Done => counter[3].ENA
Done => counter[4].ENA
Done => counter[5].ENA
Done => counter[6].ENA
Done => counter[7].ENA
Done => counter[8].ENA
Done => counter[9].ENA
Done => counter[10].ENA
Done => counter[11].ENA
Done => counter[12].ENA
Done => counter[13].ENA
Done => counter[14].ENA
Done => counter[15].ENA
Done => counter[16].ENA
Done => counter[17].ENA
Done => counter[18].ENA
Done => counter[19].ENA
lap_done => rgb1.OUTPUTSELECT
lap_done => rgb1.OUTPUTSELECT
lap_done => rgb1.OUTPUTSELECT
lap_done => rgb2.OUTPUTSELECT
lap_done => rgb2.OUTPUTSELECT
lap_done => rgb2.OUTPUTSELECT
lap_done => rgb3.OUTPUTSELECT
lap_done => rgb3.OUTPUTSELECT
lap_done => rgb3.OUTPUTSELECT
color[0] => Mux0.IN4
color[0] => Mux1.IN4
color[0] => Mux2.IN4
color[0] => Mux3.IN4
color[0] => Mux4.IN4
color[0] => Mux5.IN4
color[0] => Mux6.IN4
color[0] => Mux7.IN4
color[0] => Mux8.IN4
color[0] => Equal0.IN31
color[1] => Mux0.IN3
color[1] => Mux1.IN3
color[1] => Mux2.IN3
color[1] => Mux3.IN3
color[1] => Mux4.IN3
color[1] => Mux5.IN3
color[1] => Mux6.IN3
color[1] => Mux7.IN3
color[1] => Mux8.IN3
color[1] => Equal0.IN30
patch_enable <= patch_enable~reg0.DB_MAX_OUTPUT_PORT_TYPE
rgb1[0] <= rgb1[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rgb1[1] <= rgb1[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rgb1[2] <= rgb1[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rgb2[0] <= rgb2[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rgb2[1] <= rgb2[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rgb2[2] <= rgb2[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rgb3[0] <= rgb3[0]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rgb3[1] <= rgb3[1]~reg0.DB_MAX_OUTPUT_PORT_TYPE
rgb3[2] <= rgb3[2]~reg0.DB_MAX_OUTPUT_PORT_TYPE


